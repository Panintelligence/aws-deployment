AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The subnet for the VPC
  PublicACidrBlock:
    Type: String
    Default: 10.0.1.0/24
    Description: The subnet for public subnet A
  PublicBCidrBlock:
    Type: String
    Default: 10.0.2.0/24
    Description: The subnet for public subnet B
  PrivateCidrBlock:
    Type: String
    Default: 10.0.0.0/24
    Description: The subnet for private access
  MyS3Bucket:
    Type: String
    Description: Please obtain the s3 bucket arn that you have created for panintelligence backups and include /" at the end of the arn value
  ACMCertArn:
    Type: String
    Description: Please obtain your ACM ARN that you wish to use on the load balancer for https 
  AvailabilityZoneA:
   Type: String
   Description: Please enter your Availability zone A depending what region you are in. For example eu-west-1a for Ireland
  AvailabilityZoneB:
   Type: String
   Description: Please enter your Availability zone B depending what region you are in. For example eu-west-1b for Ireland
  AMIID:
   Type: String
   Description: Please enter your AMI ID that you recieved from market place subscriptions.
  KeyPairName:
   Type: String
   Description: Please enter your key pair that you have created
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
  # Create the subnets      
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PublicACidrBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-A'
          
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PublicBCidrBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-B'
          
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PrivateCidrBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A'
          
  # Create the route table 
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Route-table'
    
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Route-table'
          
  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      
  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
    
  PriivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
      
  # Create the security groups      
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for ALB
      GroupName: !Sub '${AWS::StackName}-load-balancer'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Security-ALB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
  
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Security-private'
      VpcId: !Ref VPC
      GroupDescription: security group for attaching to  ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8224
          ToPort: 8224
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          
  # Create NACL
  PanintelligencePublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: !Sub '${AWS::StackName}-NACL'
         
  InboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
         
  InboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443
         
  InboundRuleCustom:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 300
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref PrivateCidrBlock
       PortRange:
         From: 1024
         To: 65535
         
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 100
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 0
         To: 65535

  PublicSubnetANetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnetA
       NetworkAclId: !Ref PanintelligencePublic
    
  PublicSubnetBNetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref PublicSubnetB
       NetworkAclId: !Ref PanintelligencePublic
       
  # S3 endpoint
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: 
             - !Sub 'arn:aws:s3:::${MyS3Bucket}'
      RouteTableIds:
       - !Ref PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref VPC
      
  # Load balancer
  ApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "Panintelligence"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref PublicSubnetA
              - !Ref PublicSubnetB
            SecurityGroups: 
              - !Ref ALBSecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "200"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
                
  HTTPSListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
              - 
                CertificateArn: !Ref ACMCertArn
            DefaultActions: 
              - 
                Order: 1
                TargetGroupArn: !Ref TargetGroup
                Type: "forward"

  HTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig: 
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

  TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 65
            HealthCheckPath: "/"
            Port: 8224
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 60
            UnhealthyThresholdCount: 4
            TargetType: "instance"
            Matcher: 
                HttpCode: "200,302"
            HealthyThresholdCount: 4
            VpcId: !Ref VPC
            Name: "panintelligence"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "true"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets:
            - Id:
                Ref: PanintelligenceImage
              Port: 8224

  # Create S3 backup IAM role and policy 
  S3WritableRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Panintelligence-S3-Backup
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: panintelligence-writet-bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:GetObject'
              - 's3:PutObject'
            Resource: 
              - !Sub 'arn:aws:s3:::${MyS3Bucket}/*'
              - !Sub 'arn:aws:s3:::${MyS3Bucket}'
      Roles:
        - !Ref S3WritableRole

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: panintelligence-list-bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 
              - 's3:ListBucket'
            Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}'
      Roles:
        - !Ref S3WritableRole
        
  # Create AMI instance of BYOL panintelligence
  PanintelligenceImage:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZoneA
      ImageId: !Ref AMIID
      InstanceType: t3.medium
      SecurityGroupIds: 
        - !Ref PrivateSecurityGroup
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnetA
