AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The subnet for the VPC
  PublicACidrBlock:
    Type: String
    Default: 10.0.1.0/24
    Description: The subnet for public subnet A
  Licence:
    Type: String
    Description: The licence for the dashboard
  PublicBCidrBlock:
    Type: String
    Default: 10.0.2.0/24
    Description: The subnet for public subnet B
  PrivateCidrBlock:
    Type: String
    Default: 10.0.0.0/24
    Description: The subnet for private access
  RDSPublicA:
    Type: String
    Default: 10.0.3.0/24
    Description: The subnet for RDS availibility a
  RDSPublicB:
    Type: String
    Default: 10.0.4.0/24
    Description: The subnet for RDS availibility b
  AvailabilityZoneA:
    Type: String
    Default: eu-west-1a
    Description: >-
      Please enter your Availability zone A depending what region you are in.
      For example eu-west-1a for Ireland
  AvailabilityZoneB:
    Type: String
    Default: eu-west-1b
    Description: >-
      Please enter your Availability zone B depending what region you are in.
      For example eu-west-1b for Ireland
  RDSUsername:
    Type: String
    Default: dashboard
    Description: The username for the RDS DB
  RDSPassword:
    Type: String
    Default: dashboard12
    Description: The password for the RDS DB
  RDSEngine:
    Type: String
    Default: mariadb
    Description: The engine for the database. https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-rds-database-instance.html
  DBInstanceIdentifier:
    Type: String
    Default: panintelligence
    Description: The name of the database
  DBInstanceClass:
    Type: String
    Default: db.t2.micro
    Description: The instance class of the database
  ACMCertArn:
    Type: String
    Description: Please obtain your ACM ARN that you wish to use on the load balancer for https
  DockerUser:
    Type: String
    Description: Enter your docker username
  DockerPass:
    Type: String
    Description: Enter your docker password
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  # Create the internet gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create the subnets
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PublicACidrBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-A'

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PublicBCidrBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-B'

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PrivateCidrBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A'

  RDSPublicACidr:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: RDSPublicA
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-public-a'

  RDSPublicBCidr:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: RDSPublicB
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-public-b'

  # Create the route table
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Route-table'

  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PublicRouteTable

  RDSSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref RDSPublicACidr
      RouteTableId: !Ref PublicRouteTable

  RDSSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref RDSPublicBCidr
      RouteTableId: !Ref PublicRouteTable

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for ALB
      GroupName: !Sub '${AWS::StackName}-load-balancer'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Security-ALB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for RDS
      GroupName: !Sub '${AWS::StackName}-RDS-access'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDS-access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
        - CidrIp: 10.0.0.0/16
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306

  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group to attach to load balancer sg
      GroupName: !Sub '${AWS::StackName}-Private'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - SourceSecurityGroupId: !Ref ALBSecurityGroup
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - CidrIp: 10.0.0.0/16
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535

  # Create subnet group for rds
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: panintelligence subnet group
      DBSubnetGroupName: panintelligence
      SubnetIds:
        - !Ref RDSPublicACidr
        - !Ref RDSPublicBCidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Subnet-group'

  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Parameter group for panintelligence rds
      Family: mariadb10.4
      Parameters:
        lower_case_table_names: 1
        sql_mode: NO_AUTO_VALUE_ON_ZERO
        log_bin_trust_function_creators: 1

  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
        - Ref: RDSSecurityGroup
      AllocatedStorage: '20'
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !Ref RDSEngine
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      AvailabilityZone: !Ref AvailabilityZoneA
      Port: 3306
    DeletionPolicy: Snapshot

  ApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "Panintelligence-ALB"
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
              - !Ref PublicSubnetA
              - !Ref PublicSubnetB
            SecurityGroups:
              - !Ref ALBSecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "access_logs.s3.enabled"
                Value: "false"
              -
                Key: "idle_timeout.timeout_seconds"
                Value: "200"
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "routing.http2.enabled"
                Value: "true"
              -
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"

  HTTPSListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates:
              -
                CertificateArn: !Ref ACMCertArn
            DefaultActions:
              - Type: fixed-response
                FixedResponseConfig:
                  ContentType: "text/plain"
                  MessageBody: "You've reached the listener! Congrats!"
                  StatusCode: "503"

  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref TargetGroup
                Weight: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /*
      ListenerArn: !Ref HTTPSListener
      Priority: 1

  HTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions:
              -
                Order: 1
                RedirectConfig:
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

  TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 110
            HealthCheckPath: "/pi/"
            Port: 8224
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 60
            UnhealthyThresholdCount: 4
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 4
            VpcId: !Ref VPC
            Name: "panintelligence"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "stickiness.enabled"
                Value: "true"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

  # Create S3 backup IAM role and policy
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECSInstance
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:DescribeTags'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:UpdateContainerInstancesState'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - '*'
      Roles:
        - !Ref ECSRole

  ECSserviceELB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECS-service-ELB
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ec2:Describe*'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - 'elasticloadbalancing:RegisterTargets'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
            Resource:
              - !Ref ApplicationLoadBalancer
      Roles:
        - !Ref ECSRole

  ECSStandard:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECS-Standard
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:PutLogEvents'
              - 'logs:CreateLogStream'
              - 'ecs:UpdateContainerInstancesState'
              - 'ecs:Submit*'
              - 'ecs:StartTelemetrySession'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:Poll'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:DeregisterContainerInstance'
              - 'ec2:DescribeTags'
            Resource:
              - '*'
      Roles:
        - !Ref ECSRole

  ECSAutoscale:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ECS-Autoscale
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sns:Subscribe'
              - 'sns:List*'
              - 'sns:Get*'
              - 'sns:CreateTopic'
              - 'iam:CreateServiceLinkedRole'
              - 'ecs:UpdateService'
              - 'ecs:DescribeServices'
              - 'cloudwatch:PutMetricAlarm'
              - 'cloudwatch:ListMetrics'
              - 'cloudwatch:GetMetricStatistics'
              - 'cloudwatch:EnableAlarmActions'
              - 'cloudwatch:DisableAlarmActions'
              - 'cloudwatch:DescribeAlarmsForMetric'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:DescribeAlarmHistory'
              - 'cloudwatch:DeleteAlarms'
              - 'application-autoscaling:*'
            Resource:
              - '*'
      Roles:
        - !Ref ECSRole

  MySecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: DashboardSecret
      Description: This secret from stack
      SecretString: !Sub '{"username":"${DockerUser}","password":"${DockerPass}"}'

  Docker:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Docker-secret
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetResourcePolicy'
              - 'secretsmanager:GetSecretValue'
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:ListSecretVersionIds'
            Resource:
              - !Ref MySecret
      Roles:
        - !Ref ECSRole
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: panintelligenceECS


  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: Panintelligence
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: deployment
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !Ref ECSRole
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref ECSRole
      ContainerDefinitions:
        -
          Name: Panintelligence
          Image: "panintelligence/dashboard-marialess:2021_01_28"
          Cpu: 2048
          Memory: 4096
          Essential: true
          repositoryCredentials:
            credentialsParameter: !Ref MySecret
          Environment:
            -
              Name: PI_DB_HOST
              Value: !GetAtt MyDB.Endpoint.Address
            -
              Name: PI_DB_PASSWORD
              Value: !Ref RDSPassword
            -
              Name: PI_DB_SCHEMA_NAME
              Value: !Ref DBInstanceIdentifier
            -
              Name: PI_DB_PORT
              Value: 3306
            -
              Name: PI_EXTERNAL_DB
              Value: true
            -
              Name: PI_LICENCE
              Value: !Ref Licence
            -
              Name: PI_DB_USERNAME
              Value: !Ref RDSUsername
            -
              Name: PI_PROXY_IS_SECURE
              Value: true
            -
              Name: PI_TOMCAT_COOKIE_SAMESITE
              Value: none
            -
              Name: PI_TOMCAT_COOKIE_SECURE
              Value: true
            -
              Name: PI_TOMCAT_MAX_MEMORY
              Value: 3072
          PortMappings:
            - ContainerPort: 8224
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      TaskDefinition: !Ref taskdefinition
      PlatformVersion: 1.4.0
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref PrivateSecurityGroup
          Subnets:
            - !Ref PrivateSubnetA
      LoadBalancers:
        -
          TargetGroupArn: !Ref TargetGroup
          ContainerPort: 8224
          ContainerName: Panintelligence
      Cluster: !Ref ECSCluster
