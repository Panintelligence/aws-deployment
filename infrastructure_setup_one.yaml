AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The cider block for the VPC
  PublicZoneACidrBlock:
    Type: String
    Default: 10.0.1.0/24
    Description: The public cider block for availbility zone A that will be attached to ALB
  PublicZoneBCidrBlock:
    Type: String
    Default: 10.0.2.0/24
    Description: The public cider block for availbility zone B that will be attached to ALB
  DashboardCidrBlock:
    Type: String
    Default: 10.0.0.0/24
    Description: The cider block for private access within the VPC that the EC2 instance will use
  AvailabilityZoneA:
    Type: String
    Description: Please enter your Availability zone A depending what region you are in. For example eu-west-1a for Ireland
  AvailabilityZoneB:
    Type: String
    Description: Please enter your Availability zone B depending what region you are in. For example eu-west-1b for Ireland
  RDSUsername:
    Type: String
    Default: dashboard
    Description: The username for the RDS DB
  RDSPassword:
    Type: String
    Default: dashboard12
    Description: The password for the RDS DB
  DBName:
    Type: String
    Default: panintelligence
    Description: The name of the database
  RDSPublicA:
    Type: String
    Default: 10.0.3.0/24
    Description: The subnet for RDS availibility a
  RDSPublicB:
    Type: String
    Default: 10.0.4.0/24
    Description: The subnet for RDS availibility b
  ACMCertArn:
    Type: String
    Description: Please obtain your ACM ARN that you wish to use on the load balancer for https 
  S3BucketName:
    Type: String
    Description: S3 bucket name
  
Resources:
  ######################### CHECKED #################################################
  # Create the VPC with DNS enabled
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref S3BucketName
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'Panintelligence-${AWS::StackName}'

  # Create the internet gateway and attach it to the VPC
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    DependsOn: VPC
          
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Create the subnets
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PublicZoneACidrBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-Subnet-Zone-A'

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: PublicZoneBCidrBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Public-B-Subnet-Zone-B'

  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: DashboardCidrBlock
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-A'

  RDSPublicACidr:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: RDSPublicA
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-public-a'

  RDSPublicBCidr:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Ref: RDSPublicB
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-public-b'

  # Create the route tables
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Route-table'

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Route-table'

  PublicRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associate subnets to route tables
  RDSSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref RDSPublicACidr
      RouteTableId: !Ref PublicRouteTable

  RDSSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref RDSPublicBCidr
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  PriivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  # Create the security groups
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for ALB
      GroupName: !Sub '${AWS::StackName}-load-balancer'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Security-ALB'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for RDS
      GroupName: !Sub '${AWS::StackName}-RDS-access'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-RDS-access'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidrBlock
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Security-private'
      VpcId: !Ref VPC
      GroupDescription: security group for attaching to  ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8224
          ToPort: 8224
          SourceSecurityGroupId: !Ref ALBSecurityGroup

 
  # Create NACL
  PanintelligencePublic:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
       Tags:
       - Key: Name
         Value: !Sub '${AWS::StackName}-NACL'

  InboundRuleHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80

  InboundRuleHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 200
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443

  InboundRuleCustom:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 300
       Protocol: 6
       RuleAction: allow
       CidrBlock: !Ref DashboardCidrBlock
       PortRange:
         From: 1024
         To: 65535

  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref PanintelligencePublic
       RuleNumber: 100
       Protocol: 6
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 0
         To: 65535

  # Create subnet group for rds
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: panintelligence subnet group
      DBSubnetGroupName: Panintelligence
      SubnetIds:
        - !Ref RDSPublicACidr
        - !Ref RDSPublicBCidr
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Subnet-group'

  # Create RDS parameter group
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Parameter group for panintelligence rds
      Family: mariadb10.4
      Parameters:
        lower_case_table_names: 1
        sql_mode: NO_AUTO_VALUE_ON_ZERO
        log_bin_trust_function_creators: 1

  # Create Maria RDS for Panintelligence
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      VPCSecurityGroups:
        - Ref: RDSSecurityGroup
      AllocatedStorage: '20'
      DBInstanceClass: db.t2.micro
      Engine: mariadb
      MasterUsername: !Ref RDSUsername
      MasterUserPassword: !Ref RDSPassword
      PubliclyAccessible: true
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBParameterGroupName: !Ref RDSDBParameterGroup
      DBInstanceIdentifier: !Ref DBName
      AvailabilityZone: !Ref AvailabilityZoneA
      Port: 3306
    DeletionPolicy: Snapshot

  # Create Application Load balancer
  ApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "Panintelligence"
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
              - !Ref PublicSubnetA
              - !Ref PublicSubnetB
            SecurityGroups:
              - !Ref ALBSecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "access_logs.s3.enabled"
                Value: "false"
              -
                Key: "idle_timeout.timeout_seconds"
                Value: "2000"
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "routing.http2.enabled"
                Value: "true"
              -
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        -
          CertificateArn: !Ref ACMCertArn
      DefaultActions:
        -
          Order: 1
          TargetGroupArn: !Ref TargetGroup
          Type: "forward"

  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        -
          Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 65
      HealthCheckPath: "/"
      Port: 8224
      Protocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 60
      UnhealthyThresholdCount: 4
      TargetType: "instance"
      Matcher:
        HttpCode: "200,302"
      HealthyThresholdCount: 4
      VpcId: !Ref VPC
      Name: "panintelligence"
      HealthCheckEnabled: true
      TargetGroupAttributes:
        -
          Key: "stickiness.enabled"
          Value: "true"
        -
          Key: "deregistration_delay.timeout_seconds"
          Value: "300"
        -
          Key: "stickiness.type"
          Value: "lb_cookie"
        -
          Key: "stickiness.lb_cookie.duration_seconds"
          Value: "86400"
        -
          Key: "slow_start.duration_seconds"
          Value: "0"
        -
          Key: "load_balancing.algorithm.type"
          Value: "round_robin"




  # Create S3 backup IAM role and policy
  PanintelligenceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Panintelligence-IAM-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        # The managed IAM policy AmazonSSMManagedInstanceCore grants access to Session Manager
        #- !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM



  SecurityGroupVpcEndpoint:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow inbound HTTPS from the EC2 instance
          SourceSecurityGroupId: !Ref SecurityGroupEc2Instance
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow outbound HTTPS to the VPC
          CidrIp: !Ref VPCCidrBlock
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  SecurityGroupEc2Instance:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for EC2 Instance
      VpcId: !Ref VPC
      # Despite this security group containing no ingress rules, Session
      # Manager can still provide shell access
      SecurityGroupEgress:
        # The SSM Agent connects to Session Manager over TCP 443
        - Description: allow outbound HTTPS to the VPC
          CidrIp: !Ref VPCCidrBlock
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  SsmVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  SsmMessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

  Ec2MessagesVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref SecurityGroupVpcEndpoint
      VpcEndpointType: Interface
      PrivateDnsEnabled: True

Outputs:
  VPCID:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: VPC-ID
  S3Bucket:
    Description: The S3Bucket for lambda zip
    Value: !Ref S3Bucket
    Export:
      Name: S3BucketLambda
  VPCCidrBlock:
    Description: The VPC ID
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: VPC-CidrBlock

  DashboardSubnet:
    Description: The private subnet of the dashboard
    Value: !Ref PrivateSubnetA
    Export:
      Name: DashboardSubnet

  PanintelligenceTargetGroup:
    Description: Panintelligence Target group for load balancer
    Value: !Ref TargetGroup
    Export:
      Name: TargetGroup

  AvailabilityZoneA:
    Description: Panintelligence AvailabilityZoneA
    Value: !Ref AvailabilityZoneA
    Export:
      Name: AvailabilityZoneA

  AvailabilityZoneB:
    Description: Panintelligence AvailabilityZoneB
    Value: !Ref AvailabilityZoneB
    Export:
      Name: AvailabilityZoneB

  PrivateSecurityGroup:
    Description: Panintelligence PrivateSecurityGroup
    Value: !Ref PrivateSecurityGroup
    Export:
      Name: PrivateSecurityGroup

  SecurityGroupEc2Instance:
    Description: Panintelligence SecurityGroupEc2Instance
    Value: !Ref SecurityGroupEc2Instance
    Export:
      Name: SecurityGroupEc2Instance

  PanintelligenceRole:
    Description: Panintelligence PanintelligenceRole
    Value: !Ref PanintelligenceRole
    Export:
      Name: PanintelligenceRole

  PrivateSubnetA:
    Description: Panintelligence PrivateSubnetA
    Value: !Ref PrivateSubnetA
    Export:
      Name: PrivateSubnetA

  MyDBEndpoint:
    Description: Panintelligence MyDB Endpoint
    Value: !GetAtt MyDB.Endpoint.Address
    Export:
      Name: MyDBEndPoint

  RDSPassword:
    Description: Panintelligence MyDB password
    Value: !Ref RDSPassword
    Export:
      Name: RDSPassword

  DBPort:
    Description: Panintelligence MyDB DBPort
    Value: !GetAtt MyDB.Endpoint.Port
    Export:
      Name: DBPort
      
  RDSUsername:
    Description: Panintelligence MyDB RDSUsername
    Value: !Ref RDSUsername
    Export:
      Name: RDSUsername

  SecurityGroupVpcEndpoint:
    Description: Panintelligence SecurityGroupVpcEndpoint
    Value: !Ref SecurityGroupVpcEndpoint
    Export:
      Name: SecurityGroupVpcEndpoint
      
  RouteTable:
    Description: Panintelligence route table
    Value: !Ref PublicRouteTable
    Export:
      Name: RouteTable
