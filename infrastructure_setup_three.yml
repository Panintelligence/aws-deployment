AWSTemplateFormatVersion: 2010-09-09


# Maybe move the target group from phase 1 to phase 3 to add instance as target or have a condition when instance is created  then populate target
Parameters:

  AMIID:
    Type: String
    Description: AMI ID of the AMI
  KeyPairName:
    Type: String
    Description: AMI ID of the AMI
  DashboardLicenceKey:
    Type: String
    Description: The Dashboard licence key, please obtain that from Panintelligence account manager
Resources:

 # attach role to instance profile to instance
  MyInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Fn::ImportValue: PanintelligenceRole
 
  PanintelligenceLaunchTemplate:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t3.medium
      IamInstanceProfile: !Ref MyInstanceProfile
      SecurityGroups:
          - Fn::ImportValue: PrivateSecurityGroup
          - Fn::ImportValue: SecurityGroupEc2Instance
          - Fn::ImportValue: EFSMountTarget
      KeyName: !Ref KeyPairName
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -x
              mkdir -p /mnt/efs/
              chown pi-user:pi-group /mnt/efs/
              echo "${EfsFileSystemId}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 0 0" >> /etc/fstab
              mount -a -t nfs4
              mkdir -p /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/excel-data
              touch /opt/pi/Dashboard/startup.sh
              rm -r /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/images
              rm -r /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/themes
              ln -s /mnt/efs/images /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/images
              ln -s /mnt/efs/themes /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/themes
              ln -s /mnt/efs/excel-data /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/excel-data
              chown -h pi-user:pi-group /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/excel-data
              chmod +rwx /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/excel-data
              chown -h pi-user:pi-group /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/images
              chmod +rwx /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/images
              chown -h pi-user:pi-group /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/themes
              chmod +rwx /opt/pi/Dashboard/tomcat/webapps/panMISDashboardResources/themes
              sed -i 's/cacheMaxSize="20000"/cacheMaxSize="20000" allowLinking="true"/g' /opt/pi/Dashboard/tomcat/conf/context.xml
              chmod +rx /opt/pi/Dashboard/startup.sh
              echo "#!/usr/bin/bash" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_DB_HOST=${DBHost}" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_DB_PASSWORD=${DBPassword}" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_DB_PORT=${DBPort}" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_DB_SCHEMA_NAME='dashboard'" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_DB_USERNAME=${DBUsername}" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_EXTERNAL_DB='true'" >> /opt/pi/Dashboard/startup.sh
              echo "export PI_LICENCE='${DashboardLicenceKey}'" >> /opt/pi/Dashboard/startup.sh
              echo cd /opt/pi/Dashboard >> /opt/pi/Dashboard/startup.sh
              echo "/opt/pi/Dashboard/dashboard.sh all start" >> /opt/pi/Dashboard/startup.sh
              crontab -u pi-user -r
              lines="@reboot /bin/bash /opt/pi/Dashboard/startup.sh"
              echo "$lines" | crontab -u pi-user -
            - EfsFileSystemId: !ImportValue FileSystem
              DBHost: !ImportValue MyDBEndPoint
              DBPassword: !ImportValue RDSPassword
              DBPort: !ImportValue DBPort
              DBUsername: !ImportValue RDSUsername
              DashboardLicenceKey: !Ref DashboardLicenceKey
            
            
  PanintelligenceAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: PrivateSubnetA
      LaunchConfigurationName: !Ref PanintelligenceLaunchTemplate
      MinSize: '1'
      MaxSize: '5'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2592000
      TargetGroupARNs:
        - Fn::ImportValue: TargetGroup
      Tags:
        - Key: Name
          Value: Panintelligence
          PropagateAtLaunch: "true"
          
      
  LambdaExecute:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: panintelligence-lambda-execute
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*'
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${Bucket}/*'
              - !Sub 'arn:aws:s3:::${Bucket}'
      Roles:
        - Fn::ImportValue: LambdaRole

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'panintelligence---${AWS::Region}--${AWS::AccountId}'
      
  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: Bucket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: 
        Fn::ImportValue: 
          S3ToEFSLambdaArn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt Bucket.Arn
      
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${Bucket}/*'
              - !Sub 'arn:aws:s3:::${Bucket}'
      RouteTableIds:
        - Fn::ImportValue: PrivateRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: 
        Fn::ImportValue: VPC-ID
